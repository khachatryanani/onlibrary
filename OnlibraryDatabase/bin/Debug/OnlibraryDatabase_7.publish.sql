/*
Deployment script for OnlibraryDatabase

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "OnlibraryDatabase"
:setvar DefaultFilePrefix "OnlibraryDatabase"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Authors]...';


GO
CREATE TABLE [dbo].[Authors] (
    [AuthorId]        INT           IDENTITY (10, 1) NOT NULL,
    [AuthorFirstName] NVARCHAR (50) NOT NULL,
    [AuthorLastName]  NVARCHAR (50) NOT NULL,
    [Nationality]     NVARCHAR (30) NULL,
    [Country]         NVARCHAR (30) NULL,
    [Rating]          INT           NULL,
    CONSTRAINT [PK_AuthorID] PRIMARY KEY CLUSTERED ([AuthorId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Books]...';


GO
CREATE TABLE [dbo].[Books] (
    [BookId]      INT            IDENTITY (1000, 1) NOT NULL,
    [Title]       NVARCHAR (100) NOT NULL,
    [Year]        INT            NOT NULL,
    [Rating]      INT            NULL,
    [Pages]       INT            NULL,
    [DocumentURL] VARCHAR (2048) NULL,
    [AuthorId]    INT            NULL,
    CONSTRAINT [PK_BookID] PRIMARY KEY CLUSTERED ([BookId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Languages]...';


GO
CREATE TABLE [dbo].[Languages] (
    [LanguageId] INT           IDENTITY (1, 1) NOT NULL,
    [Language]   NVARCHAR (20) NULL,
    CONSTRAINT [PK_LanguageId] PRIMARY KEY CLUSTERED ([LanguageId] ASC),
    UNIQUE NONCLUSTERED ([Language] ASC)
);


GO
PRINT N'Creating Table [dbo].[Translations]...';


GO
CREATE TABLE [dbo].[Translations] (
    [TranslationId] INT IDENTITY (1, 1) NOT NULL,
    [BookId]        INT NULL,
    [LanguageId]    INT NULL,
    CONSTRAINT [PK_TranslationId] PRIMARY KEY CLUSTERED ([TranslationId] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Authors]...';


GO
ALTER TABLE [dbo].[Authors]
    ADD DEFAULT 0 FOR [Rating];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Books]...';


GO
ALTER TABLE [dbo].[Books]
    ADD DEFAULT 0 FOR [Rating];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Books]...';


GO
ALTER TABLE [dbo].[Books]
    ADD DEFAULT 17 FOR [Pages];


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Books]...';


GO
ALTER TABLE [dbo].[Books]
    ADD FOREIGN KEY ([AuthorId]) REFERENCES [dbo].[Authors] ([AuthorId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Translations]...';


GO
ALTER TABLE [dbo].[Translations]
    ADD FOREIGN KEY ([BookId]) REFERENCES [dbo].[Books] ([BookId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Translations]...';


GO
ALTER TABLE [dbo].[Translations]
    ADD FOREIGN KEY ([LanguageId]) REFERENCES [dbo].[Languages] ([LanguageId]);


GO
PRINT N'Creating Check Constraint [dbo].[CHD_Pages]...';


GO
ALTER TABLE [dbo].[Books]
    ADD CONSTRAINT [CHD_Pages] CHECK ([Pages] >= 17);


GO
PRINT N'Creating Procedure [dbo].[CreateAuthor]...';


GO
CREATE PROCEDURE [dbo].[CreateAuthor]
	@firstName NVARCHAR(50),
	@lastName NVARCHAR(50),
	@nationality NVARCHAR(20),
	@country NVARCHAR(20)
AS
	INSERT INTO [Authors] (AuthorFirstName, AuthorLastName, Nationality, Country)
	VALUES (@firstName, @lastName, @nationality, @country)
RETURN
GO
PRINT N'Creating Procedure [dbo].[CreateBook]...';


GO
CREATE PROCEDURE [dbo].[CreateBook]
	@title NVARCHAR(30),
	@year int,
	@pages int, 
	@authorId int
AS
	INSERT INTO [Books] (Title, Year, Pages, AuthorId)
	VALUES (@title, @year, @pages, @authorId)
RETURN
GO
PRINT N'Creating Procedure [dbo].[CreateLanguage]...';


GO
CREATE PROCEDURE [dbo].[CreateLanguage]
	@language NVARCHAR(20)
AS
	INSERT INTO [Languages] ([Language])
	VALUES (@language)
RETURN
GO
PRINT N'Creating Procedure [dbo].[CreateTranslation]...';


GO
CREATE PROCEDURE [dbo].[CreateTranslation]
	@bookId int,
	@languageId int
AS
	INSERT INTO [Translations](BookId, LanguageId)
	VALUES (@bookId, @languageId)
RETURN
GO
PRINT N'Creating Procedure [dbo].[GetAuthorById]...';


GO
CREATE PROCEDURE [dbo].[GetAuthorById]
	@id int
AS
	SELECT * From Authors WHERE Authors.AuthorId = @id;
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[GetAuthorByName]...';


GO
CREATE PROCEDURE [dbo].[GetAuthorByName]
	@firstName NVARCHAR(50),
	@lastName NVARCHAR(50)

AS
	SELECT * FROM Authors WHERE Authors.AuthorFirstName LIKE @firstName AND Authors.AuthorLastName LIKE @lastName
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[GetAuthors]...';


GO
CREATE PROCEDURE [dbo].[GetAuthors]
AS
	SELECT * FROM Authors
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[GetBookById]...';


GO
CREATE PROCEDURE [dbo].[GetBookById]
	@id int
AS
	SELECT * From Books WHERE Books.BookId = @id;
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[GetBookByTitle]...';


GO
CREATE PROCEDURE [dbo].[GetBookByTitle]
	@title NVARCHAR(50)
AS
	SELECT * FROM Books WHERE Books.Title = @title
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[GetBooks]...';


GO
CREATE PROCEDURE [dbo].[GetBooks]
AS
	SELECT * FROM Books
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[GetBooksByAuthorId]...';


GO
CREATE PROCEDURE [dbo].[GetBooksByAuthorId]
	@id int
AS
	SELECT * FROM Books
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[GetCollection]...';


GO
CREATE PROCEDURE [dbo].[GetCollection]
AS
	SELECT Books.BookId, Books.Title, Books.Year, Books.Pages, Authors.AuthorFirstName + ' ' + AuthorLastName as AuthorName, Books.Rating, Languages.Language
	FROM Books 
		JOIN Translations on Books.BookId = Translations.BookId
		JOIN Authors on Books.AuthorId = Authors.AuthorId
		JOIN Languages on Translations.LanguageId = Languages.LanguageId
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[GetLibrary]...';


GO
CREATE PROCEDURE [dbo].[GetLibrary]
AS
	SELECT Authors.AuthorId, AuthorFirstName, AuthorLastName,Nationality, Country, Authors.Rating as AuthorRating, Books.BookId, Title, Year, Books.Rating as BookRating, Pages, DocumentURl, Languages.[Language]
	FROM Authors 
		JOIN Books on Authors.AuthorId = Books.AuthorId 
		JOIN Translations on Books.BookId = Translations.BookId 
		JOIN Languages on Translations.[LanguageId] = Languages.LanguageId
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[GetTranslationByBookId]...';


GO
CREATE PROCEDURE [dbo].[GetTranslationByBookId]
	@id int = 0
AS
	SELECT Translations.BookId, Languages.LanguageId, Languages.[Language] FROM Translations JOIn Languages on Translations.LanguageId = Languages.LanguageId WHERE BookId = @id;
RETURN 0
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

INSERT INTO [Authors] (AuthorFirstName, AuthorLastName, Nationality, Country, Rating)
VALUES
('Eric', 'Fromm', 'German', 'Germany', 9),
('Eric', 'Berne', 'Canadian', 'Canada', 7),
('William', 'Saroyan', 'Armenian', 'USA', 10),
('Michail', 'Bulgakov', 'Russian', 'Russia', 9),
('Yuval Noah', 'Harari', 'Israelian', 'Israel', 8)
INSERT INTO [Languages] ([Language])
VALUES
('English'),
('Russian'),
('Armenian'),
('French'),
('Spanish'),
('German'),
('Italian')
INSERT INTO [Books] (Title, Year, AuthorId, Pages, Rating)
VALUES
('The Art of Loving', 1956, 10, 230, 10),
('To Have or To Be', 1976, 10, 287, 9),
('Games People Play',1964,11,216,7),
('What Do You Say after You Say Hello',1972,11,342,8),
('The Human Comedy',1943,12,416,10),
('My Name Is Aram',1940,12,320,10),
('The Master and Margarita',1966,13,314,9),
('The Heart of Dog',1940,13,215,10),
('Sapiens: The Brief History of HumanKind',2011,14,528,8),
('Homo Deus: The Brief History of Tommorow',2015,14,642,9)
INSERT INTO [Translations] (BookId, LanguageId)
VALUES
(1000,1),
(1000,2),
(1000,3),
(1000,4),
(1001,1),
(1003,1),
(1003,2),
(1003,5),
(1002,1),
(1004,1),
(1004,5),
(1004,6),
(1004,1),
(1005,1),
(1006,1),
(1007,1),
(1007,2),
(1008,2),
(1008,1),
(1009,1),
(1009,3),
(1009,2)
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
