/*
Deployment script for onlibraryordersdatabase

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "onlibraryordersdatabase"
:setvar DefaultFilePrefix "onlibraryordersdatabase"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
    END


GO
PRINT N'Creating Table [dbo].[Countries]...';


GO
CREATE TABLE [dbo].[Countries] (
    [CountryId] INT           IDENTITY (1, 1) NOT NULL,
    [Country]   NVARCHAR (20) NULL,
    CONSTRAINT [PK_CountryId] PRIMARY KEY CLUSTERED ([CountryId] ASC),
    UNIQUE NONCLUSTERED ([Country] ASC)
);


GO
PRINT N'Creating Table [dbo].[Languages]...';


GO
CREATE TABLE [dbo].[Languages] (
    [LanguageId] INT           IDENTITY (1, 1) NOT NULL,
    [Language]   NVARCHAR (20) NULL,
    CONSTRAINT [PK_LanguageId] PRIMARY KEY CLUSTERED ([LanguageId] ASC),
    UNIQUE NONCLUSTERED ([Language] ASC)
);


GO
PRINT N'Creating Table [dbo].[Orders]...';


GO
CREATE TABLE [dbo].[Orders] (
    [OrderId]      INT           IDENTITY (1, 1) NOT NULL,
    [UserId]       NVARCHAR (50) NOT NULL,
    [BookId]       INT           NOT NULL,
    [BookLanguage] INT           NOT NULL,
    [OrderDate]    DATETIME2 (7) NOT NULL,
    [Address]      NVARCHAR (30) NULL,
    [Country]      INT           NOT NULL,
    CONSTRAINT [PK_OrderID] PRIMARY KEY CLUSTERED ([OrderId] ASC)
);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Orders]...';


GO
ALTER TABLE [dbo].[Orders] WITH NOCHECK
    ADD FOREIGN KEY ([BookLanguage]) REFERENCES [dbo].[Languages] ([LanguageId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Orders]...';


GO
ALTER TABLE [dbo].[Orders] WITH NOCHECK
    ADD FOREIGN KEY ([Country]) REFERENCES [dbo].[Countries] ([CountryId]);


GO
PRINT N'Creating Procedure [dbo].[CreateOrder]...';


GO
CREATE PROCEDURE [dbo].[CreateOrder]
	@userId NVARCHAR(50),
	@bookId int,
	@bookLanguage int,
	@orderDate datetime2,
	@address NVARCHAR(20),
	@country int,
	@orderId INT OUTPUT
AS
	
	INSERT INTO Orders (UserId, BookId, BookLanguage, OrderDate, [Address], Country)
	VALUES (@userId, @bookId, @bookLanguage, @orderDate, @address, @country)

	SET @orderId = @@IDENTITY
RETURN
GO
PRINT N'Creating Procedure [dbo].[GetOrders]...';


GO
CREATE PROCEDURE [dbo].[GetOrders]
@userId NVARCHAR(50)
AS
	SELECT * FROM Orders WHERE UserId = @userId
RETURN 0
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

INSERT INTO [Languages] ([Language])
VALUES
('English'),
('Russian'),
('Armenian'),
('French'),
('Spanish'),
('German'),
('Italian')
INSERT INTO [Countries] (Country)
VALUES
('Armenia'),
('Russia'),
('France'),
('USE'),
('Germany')
GO

GO
